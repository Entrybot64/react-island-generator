{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","terrain","Simplex2","Math","random","canvas","this","refs","ctx","getContext","image","createImageData","width","height","data","x","y","value","min","max","abs","gen","cell","cellRGBA","grass","sn","noise2f","putImageData","window","innerHeight","innerWidth","ref","Component","r","g","b","a","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAIqBA,E,4LAUnB,IARA,IAAIC,EAAU,IAAIC,WAASC,KAAKC,UAC5BC,EAASC,KAAKC,KAAKF,OACnBG,EAAMH,EAAOI,WAAW,MAGxBC,EAAQF,EAAIG,gBAAgBN,EAAOO,MAAOP,EAAOQ,QACjDC,EAAOJ,EAAMI,KAERC,EAAI,EAAGA,EAAIV,EAAOO,MAAOG,IACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAOQ,OAAQG,IAAK,CACvC,IAAIC,EAAQd,KAAKe,IAChBf,KAAKgB,IAAIhB,KAAKiB,IAAInB,EAAQoB,IAAIN,EARZ,IAQ8BC,EAR9B,MAQkD,IACpE,IAEGM,EAAgC,GAAxBP,EAAIC,EAAIX,EAAOO,OAE3B,GAAIK,EAAQ,KAAQA,EAAQ,GAE3BM,EAAST,EAAMQ,EAAM,IAAK,IAAK,GAAI,UAC7B,GAAIL,GAAS,GAAK,CACxB,IAAIO,EAAQrB,KAAKe,IAChBf,KAAKgB,IAAIM,IAAGC,QAAQX,EAAGC,GAAI,KAC3B,KAGDO,EAAST,EAAMQ,EAAM,GAAKE,EAAO,IAAMA,EAAO,GAAKA,EAAO,UAG1DD,EAAST,EAAMQ,EAAM,EAAG,IAAK,IAAK,KAKrCd,EAAImB,aAAajB,EAAO,EAAG,K,+BAG3B,OACC,4BACCG,OAAQe,OAAOC,YACfjB,MAAOgB,OAAOE,WACdC,IAAI,e,GA1CyBC,aAgD7BT,EAAW,SAACT,EAAMQ,EAAMW,EAAGC,EAAGC,EAAGC,GACpCtB,EAAKQ,GAAQW,EACbnB,EAAKQ,EAAO,GAAKY,EACjBpB,EAAKQ,EAAO,GAAKa,EACjBrB,EAAKQ,EAAO,GAAKc,GC5CEC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc8f67bf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Simplex2 } from 'tumult'\nimport sn from 'spatial-noise'\n\nexport default class App extends Component {\n\tcomponentDidMount() {\n\t\tlet terrain = new Simplex2(Math.random())\n\t\tlet canvas = this.refs.canvas\n\t\tlet ctx = canvas.getContext('2d')\n\t\tconst terrainScale = 500\n\n\t\tvar image = ctx.createImageData(canvas.width, canvas.height)\n\t\tvar data = image.data\n\n\t\tfor (var x = 0; x < canvas.width; x++) {\n\t\t\tfor (var y = 0; y < canvas.height; y++) {\n\t\t\t\tvar value = Math.min(\n\t\t\t\t\tMath.max(Math.abs(terrain.gen(x / terrainScale, y / terrainScale)), 0.2),\n\t\t\t\t\t0.3\n\t\t\t\t)\n\t\t\t\tvar cell = (x + y * canvas.width) * 4\n\n\t\t\t\tif (value > 0.25 && value < 0.3) {\n\t\t\t\t\t// Plage\n\t\t\t\t\tcellRGBA(data, cell, 255, 239, 97, 255)\n\t\t\t\t} else if (value >= 0.3) {\n\t\t\t\t\tlet grass = Math.min(\n\t\t\t\t\t\tMath.max(sn.noise2f(x, y), 0.45),\n\t\t\t\t\t\t0.55\n\t\t\t\t\t)\n\t\t\t\t\t//\tGazon\n\t\t\t\t\tcellRGBA(data, cell, 90 * grass, 180 * grass, 45 * grass, 255)\n\t\t\t\t} else {\n\t\t\t\t\t// Eau\n\t\t\t\t\tcellRGBA(data, cell, 0, 128, 255, 255)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tctx.putImageData(image, 0, 0)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\theight={window.innerHeight}\n\t\t\t\twidth={window.innerWidth}\n\t\t\t\tref=\"canvas\"\n\t\t\t/>\n\t\t)\n\t}\n}\n\nlet cellRGBA = (data, cell, r, g, b, a) => {\n\tdata[cell] = r\n\tdata[cell + 1] = g\n\tdata[cell + 2] = b\n\tdata[cell + 3] = a\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}